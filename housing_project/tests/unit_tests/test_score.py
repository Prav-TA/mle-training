import pandas as pd
import pytest

from src.housing_price_prediction.score import evaluate_model
from src.housing_price_prediction.train import train_forest_with_grid_search


@pytest.fixture()
def sample_model():
    X = pd.DataFrame(
        {
            "longitude": {
                1: -117.65,
                24: -118.26,
                17: -118.99,
                21: -123.76,
                9: -117.16,
                29: -118.29,
                26: -117.62,
                13: -117.14,
                19: -117.06,
                22: -121.98,
                8: -121.14,
                4: -118.14,
                10: -118.31,
                0: -117.2,
                11: -122.41,
                6: -118.27,
                5: -118.34,
                12: -118.02,
                18: -122.02,
                2: -119.79,
                20: -121.92,
                14: -122.01,
                7: -121.14,
                28: -117.97,
            },
            "latitude": {
                1: 34.09,
                24: 33.79,
                17: 35.38,
                21: 41.03,
                9: 32.71,
                29: 34.07,
                26: 34.09,
                13: 32.79,
                19: 32.75,
                22: 37.33,
                8: 40.29,
                4: 34.15,
                10: 34.09,
                0: 34.26,
                11: 37.78,
                6: 34.16,
                5: 34.26,
                12: 33.62,
                18: 37.6,
                2: 36.79,
                20: 36.57,
                14: 37.31,
                7: 38.77,
                28: 34.13,
            },
            "housing_median_age": {
                1: 46.0,
                24: 30.0,
                17: 26.0,
                21: 24.0,
                9: 5.0,
                29: 26.0,
                26: 26.0,
                13: 35.0,
                19: 34.0,
                22: 30.0,
                8: 17.0,
                4: 17.0,
                10: 30.0,
                0: 17.0,
                11: 52.0,
                6: 45.0,
                5: 37.0,
                12: 11.0,
                18: 32.0,
                2: 33.0,
                20: 42.0,
                14: 26.0,
                7: 15.0,
                28: 42.0,
            },
            "total_rooms": {
                1: 1214.0,
                24: 1291.0,
                17: 1317.0,
                21: 2386.0,
                9: 2508.0,
                29: 2302.0,
                26: 3271.0,
                13: 3578.0,
                19: 2516.0,
                22: 3742.0,
                8: 1944.0,
                4: 1896.0,
                10: 3165.0,
                0: 9419.0,
                11: 1928.0,
                6: 1865.0,
                5: 1776.0,
                12: 3969.0,
                18: 1295.0,
                2: 3433.0,
                20: 3944.0,
                14: 1391.0,
                7: 10282.0,
                28: 683.0,
            },
            "total_bedrooms": {
                1: 281.0,
                24: 230.0,
                17: 374.0,
                21: 565.0,
                9: 827.0,
                29: 1124.0,
                26: 595.0,
                13: 582.0,
                19: 611.0,
                22: 633.0,
                8: 394.0,
                4: 674.0,
                10: 1263.0,
                0: 1455.0,
                11: 836.0,
                6: 360.0,
                5: 301.0,
                12: 834.0,
                18: 295.0,
                2: 785.0,
                20: 738.0,
                14: 241.0,
                7: 1333.0,
                28: 127.0,
            },
            "population": {
                1: 701.0,
                24: 835.0,
                17: 1025.0,
                21: 1058.0,
                9: 2066.0,
                29: 2660.0,
                26: 2259.0,
                13: 1568.0,
                19: 1317.0,
                22: 1721.0,
                8: 384.0,
                4: 971.0,
                10: 3678.0,
                0: 1382.0,
                11: 2124.0,
                6: 973.0,
                5: 702.0,
                12: 1508.0,
                18: 1097.0,
                2: 1806.0,
                20: 1374.0,
                14: 700.0,
                7: 3868.0,
                28: 541.0,
            },
            "households": {
                1: 294.0,
                24: 215.0,
                17: 304.0,
                21: 414.0,
                9: 761.0,
                29: 1004.0,
                26: 566.0,
                13: 553.0,
                19: 594.0,
                22: 631.0,
                8: 172.0,
                4: 652.0,
                10: 1141.0,
                0: 459.0,
                11: 739.0,
                6: 349.0,
                5: 265.0,
                12: 754.0,
                18: 328.0,
                2: 783.0,
                20: 598.0,
                14: 236.0,
                7: 1300.0,
                28: 138.0,
            },
            "median_income": {
                1: 2.7083,
                24: 5.5,
                17: 1.4024,
                21: 2.0644,
                9: 1.3092,
                29: 2.3567,
                26: 4.0139,
                13: 4.7813,
                19: 2.2308,
                22: 6.1388,
                8: 1.6875,
                4: 0.8438,
                10: 2.0,
                0: 6.2233,
                11: 1.1185,
                6: 3.6587,
                5: 5.2661,
                12: 4.3409,
                18: 3.2386,
                2: 1.9386,
                20: 4.174,
                14: 6.6766,
                7: 6.4789,
                28: 3.4375,
            },
            "ocean_proximity_INLAND": {
                1: True,
                24: False,
                17: True,
                21: False,
                9: False,
                29: False,
                26: True,
                13: False,
                19: False,
                22: False,
                8: True,
                4: False,
                10: False,
                0: True,
                11: False,
                6: False,
                5: False,
                12: False,
                18: False,
                2: True,
                20: False,
                14: False,
                7: True,
                28: True,
            },
            "ocean_proximity_NEAR BAY": {
                1: False,
                24: False,
                17: False,
                21: False,
                9: False,
                29: False,
                26: False,
                13: False,
                19: False,
                22: False,
                8: False,
                4: False,
                10: False,
                0: False,
                11: True,
                6: False,
                5: False,
                12: False,
                18: True,
                2: False,
                20: False,
                14: False,
                7: False,
                28: False,
            },
            "ocean_proximity_NEAR OCEAN": {
                1: False,
                24: False,
                17: False,
                21: False,
                9: True,
                29: False,
                26: False,
                13: True,
                19: True,
                22: False,
                8: False,
                4: False,
                10: False,
                0: False,
                11: False,
                6: False,
                5: False,
                12: True,
                18: False,
                2: False,
                20: True,
                14: False,
                7: False,
                28: False,
            },
            "income_cat": {
                1: 2,
                24: 4,
                17: 1,
                21: 2,
                9: 1,
                29: 2,
                26: 3,
                13: 4,
                19: 2,
                22: 5,
                8: 2,
                4: 1,
                10: 2,
                0: 5,
                11: 1,
                6: 3,
                5: 4,
                12: 3,
                18: 3,
                2: 2,
                20: 3,
                14: 5,
                7: 5,
                28: 3,
            },
            "rooms_per_household": {
                1: 4.129251700680272,
                24: 6.004651162790697,
                17: 4.332236842105263,
                21: 5.763285024154589,
                9: 3.295663600525624,
                29: 2.2928286852589643,
                26: 5.779151943462898,
                13: 6.470162748643761,
                19: 4.235690235690235,
                22: 5.93026941362916,
                8: 11.30232558139535,
                4: 2.9079754601226995,
                10: 2.7738825591586327,
                0: 20.52069716775599,
                11: 2.60893098782138,
                6: 5.343839541547278,
                5: 6.7018867924528305,
                12: 5.26392572944297,
                18: 3.948170731707317,
                2: 4.384418901660281,
                20: 6.595317725752508,
                14: 5.8940677966101696,
                7: 7.909230769230769,
                28: 4.949275362318841,
            },
            "bedrooms_per_room": {
                1: 0.23146622734761121,
                24: 0.17815646785437644,
                17: 0.2839787395596052,
                21: 0.23679798826487847,
                9: 0.32974481658692184,
                29: 0.4882710686359687,
                26: 0.18190155915622133,
                13: 0.1626607043040805,
                19: 0.24284578696343403,
                22: 0.16916087653661144,
                8: 0.20267489711934156,
                4: 0.35548523206751054,
                10: 0.3990521327014218,
                0: 0.15447499734579043,
                11: 0.4336099585062241,
                6: 0.19302949061662197,
                5: 0.16948198198198197,
                12: 0.21012849584278157,
                18: 0.2277992277992278,
                2: 0.2286629769880571,
                20: 0.18711967545638944,
                14: 0.1732566498921639,
                7: 0.12964403812487843,
                28: 0.18594436310395315,
            },
            "population_per_household": {
                1: 2.3843537414965987,
                24: 3.883720930232558,
                17: 3.3717105263157894,
                21: 2.5555555555555554,
                9: 2.7148488830486204,
                29: 2.649402390438247,
                26: 3.991166077738516,
                13: 2.8354430379746836,
                19: 2.217171717171717,
                22: 2.7274167987321714,
                8: 2.2325581395348837,
                4: 1.4892638036809815,
                10: 3.223488168273444,
                0: 3.0108932461873636,
                11: 2.8741542625169147,
                6: 2.7879656160458453,
                5: 2.6490566037735848,
                12: 2.0,
                18: 3.3445121951219514,
                2: 2.3065134099616857,
                20: 2.297658862876254,
                14: 2.9661016949152543,
                7: 2.9753846153846153,
                28: 3.920289855072464,
            },
        }
    )
    y = pd.Series(
        [
            116300.0,
            181500.0,
            51000.0,
            79800.0,
            325000.0,
            253100.0,
            132000.0,
            188600.0,
            125900.0,
            302400.0,
            111500.0,
            175000.0,
            240600.0,
            230900.0,
            55000.0,
            321200.0,
            314900.0,
            271400.0,
            149600.0,
            67500.0,
            394400.0,
            332700.0,
            287800.0,
            151700.0,
        ]
    )
    forest_model = train_forest_with_grid_search(X, y)

    return forest_model, X, y


def test_evaluate_model(sample_model):
    """
    Tests that evaluate_model produces a positive score with a sample model.

    The sample model is a random forest regressor trained on a subset of the
    housing data. The score is the mean squared error between the model's
    predictions and the actual values.

    Parameters
    ----------
    sample_model : tuple
        A tuple containing the model, X, and y. The model is a random forest
        regressor, X is the feature matrix, and y is the target vector.

    Returns
    -------
    None
    """
    model, X, y = sample_model
    score = evaluate_model(model, X, y)
    assert score > 0
